import * as React from 'react';
import { PopoverProps } from '@patternfly/react-core';
import { Node } from '../../../types';
import { RunStatus } from '../../types';
import { WithContextMenuProps, WithSelectionProps } from '../../../behavior';
export declare type TaskNodeProps = {
    children?: React.ReactNode;
    element: Node;
    className?: string;
    paddingX?: number;
    paddingY?: number;
    nameLabelClass?: string;
    status?: RunStatus;
    statusIconSize?: number;
    showStatusState?: boolean;
    scaleNode?: boolean;
    hideDetailsAtMedium?: boolean;
    hiddenDetailsShownStatuses?: RunStatus[];
    badge?: string;
    badgeColor?: string;
    badgeTextColor?: string;
    badgeBorderColor?: string;
    badgeClassName?: string;
    /** @deprecated Use badgePopoverParams instead */
    badgePopoverProps?: string;
    badgeTooltip?: React.ReactNode;
    badgePopoverParams?: PopoverProps;
    taskIconClass?: string;
    taskIcon?: React.ReactNode;
    taskIconTooltip?: React.ReactNode;
    taskIconPadding?: number;
    hover?: boolean;
    truncateLength?: number;
    disableTooltip?: boolean;
    toolTip?: React.ReactNode;
    hasWhenExpression?: boolean;
    whenSize?: number;
    whenOffset?: number;
    actionIcon?: React.ReactElement;
    actionIconClassName?: string;
    onActionIconClick?: (e: React.MouseEvent) => void;
} & Partial<WithSelectionProps> & Partial<WithContextMenuProps>;
declare const _default: React.ForwardRefExoticComponent<{
    children?: React.ReactNode;
    element: Node<import("../../../types").NodeModel, any>;
    className?: string;
    paddingX?: number;
    paddingY?: number;
    nameLabelClass?: string;
    status?: RunStatus;
    statusIconSize?: number;
    showStatusState?: boolean;
    scaleNode?: boolean;
    hideDetailsAtMedium?: boolean;
    hiddenDetailsShownStatuses?: RunStatus[];
    badge?: string;
    badgeColor?: string;
    badgeTextColor?: string;
    badgeBorderColor?: string;
    badgeClassName?: string;
    /** @deprecated Use badgePopoverParams instead */
    badgePopoverProps?: string;
    badgeTooltip?: React.ReactNode;
    badgePopoverParams?: PopoverProps;
    taskIconClass?: string;
    taskIcon?: React.ReactNode;
    taskIconTooltip?: React.ReactNode;
    taskIconPadding?: number;
    hover?: boolean;
    truncateLength?: number;
    disableTooltip?: boolean;
    toolTip?: React.ReactNode;
    hasWhenExpression?: boolean;
    whenSize?: number;
    whenOffset?: number;
    actionIcon?: React.ReactElement<any, string | React.JSXElementConstructor<any>>;
    actionIconClassName?: string;
    onActionIconClick?: (e: React.MouseEvent<Element, MouseEvent>) => void;
} & Partial<WithSelectionProps> & Partial<WithContextMenuProps> & React.RefAttributes<SVGGElement>>;
export default _default;
//# sourceMappingURL=TaskNode.d.ts.map